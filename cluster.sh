#!/bin/bash

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[CLUSTER]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[CLUSTER]${NC} $1"
}

error() {
    echo -e "${RED}[CLUSTER]${NC} $1"
}

info() {
    echo -e "${BLUE}[CLUSTER]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
check_scripts() {
    local scripts=("scripts/deploy-cluster.sh" "scripts/destroy-cluster.sh" "scripts/manage-services.sh")
    
    for script in "${scripts[@]}"; do
        if [ ! -f "$script" ]; then
            error "–°–∫—Ä–∏–ø—Ç $script –Ω–µ –Ω–∞–π–¥–µ–Ω"
            return 1
        fi
        
        if [ ! -x "$script" ]; then
            chmod +x "$script"
            log "–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è $script"
        fi
    done
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
show_help() {
    echo "ML Platform Cluster Management"
    echo "============================="
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê] [–ê–†–ì–£–ú–ï–ù–¢–´]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–º:"
    echo "  deploy                        - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä"
    echo "  start                         - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"
    echo "  stop                          - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"
    echo "  destroy                       - –£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"
    echo "  status                        - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏:"
    echo "  services init                 - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å namespace –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  services templates            - –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è Java —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  services deploy               - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã"
    echo "  services build NAME [DOCKERFILE] - –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑"
    echo "  services restart NAME         - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "  services logs NAME [follow]   - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  services status               - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo ""
    echo "–£—Ç–∏–ª–∏—Ç—ã:"
    echo "  port-forward postgres         - –ü—Ä–æ–∫–∏–Ω—É—Ç—å –ø–æ—Ä—Ç PostgreSQL (5432)"
    echo "  port-forward minio            - –ü—Ä–æ–∫–∏–Ω—É—Ç—å –ø–æ—Ä—Ç MinIO UI (9001)"
    echo "  port-forward keycloak         - –ü—Ä–æ–∫–∏–Ω—É—Ç—å –ø–æ—Ä—Ç Keycloak (8082)"
    echo "  port-forward artifact-store   - –ü—Ä–æ–∫–∏–Ω—É—Ç—å –ø–æ—Ä—Ç—ã –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ artifact-store"
    echo "  port-forward redpanda         - –ü—Ä–æ–∫–∏–Ω—É—Ç—å –ø–æ—Ä—Ç Redpanda/Kafka (9092)"
    echo "  redpanda-topics [TOPICS...]   - –°–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫–∏ –≤ RedPanda (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Å–æ–∑–¥–∞—Å—Ç –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)"
    echo "  shell                         - –û—Ç–∫—Ä—ã—Ç—å shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
    echo "  help                          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 deploy                     # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä"
    echo "  $0 services init              # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo "  $0 services build java-service-1  # –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑"
    echo "  $0 port-forward postgres      # –ü—Ä–æ–∫–∏–Ω—É—Ç—å –ø–æ—Ä—Ç PostgreSQL"
    echo "  $0 port-forward keycloak      # –ü—Ä–æ–∫–∏–Ω—É—Ç—å –ø–æ—Ä—Ç Keycloak"
    echo "  $0 port-forward artifact-store # –ü—Ä–æ–∫–∏–Ω—É—Ç—å –ø–æ—Ä—Ç—ã –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ artifact-store"
    echo "  $0 port-forward redpanda      # –ü—Ä–æ–∫–∏–Ω—É—Ç—å –ø–æ—Ä—Ç Redpanda/Kafka"
    echo "  $0 status                     # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞"
}

# Port forwarding
port_forward() {
    local service="$1"
    
    case "$service" in
        "postgres")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞
            if ! kubectl cluster-info &> /dev/null; then
                error "Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω:"
                echo "  $0 start    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"
                echo "  $0 status   # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞"
                exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ namespace
            if ! kubectl get namespace model-registry &> /dev/null; then
                error "Namespace 'model-registry' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã."
                echo "  $0 services deploy   # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
                exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ postgres
            if ! kubectl get svc postgres -n model-registry &> /dev/null; then
                error "–°–µ—Ä–≤–∏—Å 'postgres' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ namespace 'model-registry'"
                echo "  kubectl get svc -n model-registry   # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
                exit 1
            fi
            
            log "–ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–∞ PostgreSQL –Ω–∞ localhost:5432"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ä—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥
            kubectl port-forward -n model-registry svc/postgres 5432:5432 &
            POSTGRES_PID=$!
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
            if ! kill -0 $POSTGRES_PID 2>/dev/null; then
                error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ –¥–ª—è PostgreSQL"
                exit 1
            fi
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            echo ""
            echo "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL:"
            echo "PostgreSQL:        localhost:5432"
            echo ""
            echo "üìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):"
            echo "Username:          admin"
            echo "Password:          password"
            echo "Database:          model_registry_db"
            echo ""
            echo "üõë –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            trap 'kill $POSTGRES_PID; exit' INT
            wait
            ;;
        "minio")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞
            if ! kubectl cluster-info &> /dev/null; then
                error "Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω:"
                echo "  $0 start    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"
                echo "  $0 status   # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞"
                exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ namespace
            if ! kubectl get namespace model-registry &> /dev/null; then
                error "Namespace 'model-registry' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã."
                echo "  $0 services deploy   # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
                exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ minio
            if ! kubectl get svc minio -n model-registry &> /dev/null; then
                error "–°–µ—Ä–≤–∏—Å 'minio' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ namespace 'model-registry'"
                echo "  kubectl get svc -n model-registry   # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
                exit 1
            fi
            
            log "–ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ MinIO UI –Ω–∞ localhost:9001 –∏ MinIO API –Ω–∞ localhost:9000"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ä—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥
            kubectl port-forward -n model-registry svc/minio 9001:9001 &
            MINIO_CONSOLE_PID=$!
            
            kubectl port-forward -n model-registry svc/minio 9000:9000 &
            MINIO_API_PID=$!
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
            if ! kill -0 $MINIO_CONSOLE_PID 2>/dev/null || ! kill -0 $MINIO_API_PID 2>/dev/null; then
                error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ –¥–ª—è MinIO"
                kill $MINIO_CONSOLE_PID $MINIO_API_PID 2>/dev/null || true
                exit 1
            fi
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            echo ""
            echo "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MinIO:"
            echo "MinIO Console:     http://localhost:9001"
            echo "MinIO API:         http://localhost:9000"
            echo ""
            echo "üìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):"
            echo "Access Key:        AKIAIOSFODNN7EXAMPLE"
            echo "Secret Key:        wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
            echo ""
            echo "üõë –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            trap 'kill $MINIO_CONSOLE_PID $MINIO_API_PID; exit' INT
            wait
            ;;
        "keycloak")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞
            if ! kubectl cluster-info &> /dev/null; then
                error "Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω:"
                echo "  $0 start    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"
                echo "  $0 status   # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞"
                exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ namespace
            if ! kubectl get namespace model-registry &> /dev/null; then
                error "Namespace 'model-registry' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã."
                echo "  $0 services deploy   # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
                exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ keycloak
            if ! kubectl get svc keycloak -n model-registry &> /dev/null; then
                error "–°–µ—Ä–≤–∏—Å 'keycloak' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ namespace 'model-registry'"
                echo "  kubectl get svc -n model-registry   # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
                exit 1
            fi
            
            log "–ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–∞ Keycloak –Ω–∞ localhost:8082"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ä—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥
            kubectl port-forward -n model-registry svc/keycloak 8082:8080 &
            KEYCLOAK_PID=$!
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
            if ! kill -0 $KEYCLOAK_PID 2>/dev/null; then
                error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ –¥–ª—è Keycloak"
                exit 1
            fi
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            echo ""
            echo "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Keycloak:"
            echo "Keycloak UI:       http://localhost:8082"
            echo ""
            echo "üìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):"
            echo "Username:          admin"
            echo "Password:          admin"
            echo ""
            echo "üõë –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            trap 'kill $KEYCLOAK_PID; exit' INT
            wait
            ;;
        "artifact-store")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞
            if ! kubectl cluster-info &> /dev/null; then
                error "Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω:"
                echo "  $0 start    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"
                echo "  $0 status   # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Çera"
                exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ namespace
            if ! kubectl get namespace artifact-store &> /dev/null; then
                error "Namespace 'artifact-store' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã."
                echo "  $0 services deploy   # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
                exit 1
            fi
            
            log "–ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ artifact-store namespace"
            log "PostgreSQL: localhost:5432, MinIO Console: localhost:9001, MinIO API: localhost:9000, Artifact Store: localhost:8080"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ä—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ñ–æ–Ω–µ
            kubectl port-forward -n artifact-store svc/postgres 5432:5432 &
            POSTGRES_PID=$!
            
            kubectl port-forward -n artifact-store svc/minio 9001:9001 &
            MINIO_CONSOLE_PID=$!
            
            kubectl port-forward -n artifact-store svc/minio 9000:9000 &
            MINIO_API_PID=$!
            
            kubectl port-forward -n artifact-store svc/artifact-store 8099:8080 &
            ARTIFACT_STORE_PID=$!
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º credentials MinIO –∏–∑ secret
            MINIO_ACCESS_KEY=""
            MINIO_SECRET_KEY=""
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å credentials –∏–∑ secret
            if kubectl get secret -n artifact-store artifact-store-secrets &> /dev/null; then
                MINIO_ACCESS_KEY=$(kubectl get secret -n artifact-store artifact-store-secrets -o jsonpath='{.data.MINIO_ACCESS_KEY}' | base64 -d 2>/dev/null || echo "")
                MINIO_SECRET_KEY=$(kubectl get secret -n artifact-store artifact-store-secrets -o jsonpath='{.data.MINIO_SECRET_KEY}' | base64 -d 2>/dev/null || echo "")
            fi
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å credentials, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if [ -z "$MINIO_ACCESS_KEY" ]; then
                MINIO_ACCESS_KEY="AKIAIOSFODNN7EXAMPLE"
            fi
            if [ -z "$MINIO_SECRET_KEY" ]; then
                MINIO_SECRET_KEY="wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
            fi
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
            echo ""
            echo "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º artifact-store:"
            echo "PostgreSQL:        localhost:5432"
            echo "MinIO Console:     http://localhost:9001"
            echo "MinIO API:         http://localhost:9000"
            echo "Artifact Store:    http://localhost:8080"
            echo ""
            echo "üìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
            echo "PostgreSQL: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=admin, –ø–∞—Ä–æ–ª—å=password, –±–∞–∑–∞=artifact_store_db"
            echo "MinIO Endpoint:    http://localhost:9000"
            echo "MinIO Access Key:  $MINIO_ACCESS_KEY"
            echo "MinIO Secret Key:  $MINIO_SECRET_KEY"
            echo ""
            echo "üõë –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            trap 'kill $POSTGRES_PID $MINIO_CONSOLE_PID $MINIO_API_PID $ARTIFACT_STORE_PID; exit' INT
            wait
            ;;
        "model-registry")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞
            if ! kubectl cluster-info &> /dev/null; then
                error "Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω:"
                echo "  $0 start    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"
                echo "  $0 status   # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Çera"
                exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ namespace
            if ! kubectl get namespace model-registry &> /dev/null; then
                error "Namespace 'model-registry' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã."
                echo "  $0 services deploy   # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
                exit 1
            fi
            
            log "–ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ model-registry namespace"
            log "PostgreSQL: localhost:5432, MinIO Console: localhost:9001, MinIO API: localhost:9000, Artifact Store: localhost:8080"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ä—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ñ–æ–Ω–µ
            kubectl port-forward -n model-registry svc/postgres 5432:5432 &
            POSTGRES_PID=$!
            
            kubectl port-forward -n artifact-store svc/minio 9001:9001 &
            MINIO_CONSOLE_PID=$!
            
            kubectl port-forward -n artifact-store svc/minio 9000:9000 &
            MINIO_API_PID=$!
            
            kubectl port-forward -n model-registry svc/model-registry 8099:8080 &
            ARTIFACT_STORE_PID=$!
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º credentials MinIO –∏–∑ secret
            MINIO_ACCESS_KEY=""
            MINIO_SECRET_KEY=""
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å credentials –∏–∑ secret
            if kubectl get secret -n artifact-store artifact-store-secrets &> /dev/null; then
                MINIO_ACCESS_KEY=$(kubectl get secret -n artifact-store artifact-store-secrets -o jsonpath='{.data.MINIO_ACCESS_KEY}' | base64 -d 2>/dev/null || echo "")
                MINIO_SECRET_KEY=$(kubectl get secret -n artifact-store artifact-store-secrets -o jsonpath='{.data.MINIO_SECRET_KEY}' | base64 -d 2>/dev/null || echo "")
            fi
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å credentials, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if [ -z "$MINIO_ACCESS_KEY" ]; then
                MINIO_ACCESS_KEY="AKIAIOSFODNN7EXAMPLE"
            fi
            if [ -z "$MINIO_SECRET_KEY" ]; then
                MINIO_SECRET_KEY="wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
            fi
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
            echo ""
            echo "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º artifact-store:"
            echo "PostgreSQL:        localhost:5432"
            echo "MinIO Console:     http://localhost:9001"
            echo "MinIO API:         http://localhost:9000"
            echo "Model Registry:    http://localhost:8099"
            echo ""
            echo "üìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
            echo "PostgreSQL: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=admin, –ø–∞—Ä–æ–ª—å=password, –±–∞–∑–∞=model_registry_db"
            echo "MinIO Endpoint:    http://localhost:9000"
            echo "MinIO Access Key:  $MINIO_ACCESS_KEY"
            echo "MinIO Secret Key:  $MINIO_SECRET_KEY"
            echo ""
            echo "üõë –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            trap 'kill $POSTGRES_PID $MINIO_CONSOLE_PID $MINIO_API_PID $ARTIFACT_STORE_PID; exit' INT
            wait
            ;;
        "redpanda")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞
            if ! kubectl cluster-info &> /dev/null; then
                error "Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω:"
                echo "  $0 start    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"
                echo "  $0 status   # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞"
                exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ namespace
            if ! kubectl get namespace model-registry &> /dev/null; then
                error "Namespace 'model-registry' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã."
                echo "  $0 services deploy   # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
                exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ redpanda-external
            if ! kubectl get svc redpanda-external -n model-registry &> /dev/null; then
                error "–°–µ—Ä–≤–∏—Å 'redpanda-external' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ namespace 'model-registry'"
                echo "  kubectl get svc -n model-registry   # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
                exit 1
            fi
            
            log "–ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–∞ Redpanda/Kafka –Ω–∞ localhost:9092"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ä—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥
            kubectl port-forward -n model-registry svc/redpanda-external 9092:9092 &
            REDPANDA_PID=$!
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
            if ! kill -0 $REDPANDA_PID 2>/dev/null; then
                error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ –¥–ª—è Redpanda"
                exit 1
            fi
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            echo ""
            echo "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redpanda/Kafka:"
            echo "Kafka Bootstrap:   localhost:9092"
            echo ""
            echo "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Java-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:"
            echo "bootstrap.servers=localhost:9092"
            echo ""
            echo "üõë –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            trap 'kill $REDPANDA_PID; exit' INT
            wait
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $service"
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: postgres, minio, keycloak, artifact-store, redpanda"
            exit 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤ RedPanda
create_redpanda_topics() {
    local topics=("$@")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞
    if ! kubectl cluster-info &> /dev/null; then
        error "Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω:"
        echo "  $0 start    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"
        echo "  $0 status   # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ namespace
    if ! kubectl get namespace model-registry &> /dev/null; then
        error "Namespace 'model-registry' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã."
        echo "  $0 services deploy   # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∞ redpanda
    if ! kubectl get pod redpanda-0 -n model-registry &> /dev/null; then
        error "–ü–æ–¥–∞ 'redpanda-0' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ namespace 'model-registry'"
        echo "  kubectl get pods -n model-registry   # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—ã"
        exit 1
    fi
    
    # –ï—Å–ª–∏ —Ç–æ–ø–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
    if [ ${#topics[@]} -eq 0 ]; then
        topics=(
            "endpoint.events"
            "endpoint.events.cmd"
            "endpoint.events.dlq"
            "file.events"
            "file.events.cmd"
            "file.events.dlq"
            "model.events"
            "model.events.cmd"
            "model.events.dlq"
            "resource.events"
            "resource.events.cmd"
            "resource.events.dlq"
        )
        log "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ RedPanda"
    fi
    
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ RedPanda..."
    
    # –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RedPanda
    log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RedPanda..."
    if ! kubectl wait --for=condition=ready pod -n model-registry redpanda-0 --timeout=120s; then
        warn "RedPanda –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 120 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤"
    fi
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–ø–∏–∫
    local success_count=0
    local total_count=${#topics[@]}
    
    for topic in "${topics[@]}"; do
        log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ø–∏–∫–∞: $topic"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–ø–∏–∫
        if kubectl exec -n model-registry redpanda-0 -- rpk topic list | grep -q "^$topic$"; then
            log "–¢–æ–ø–∏–∫ $topic —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ"
            ((success_count++))
        else
            log "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞: $topic"
            if kubectl exec -n model-registry redpanda-0 -- rpk topic create "$topic"; then
                log "–¢–æ–ø–∏–∫ $topic —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
                ((success_count++))
            else
                warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ $topic"
            fi
        fi
    done
    
    if [ $success_count -eq $total_count ]; then
        log "–í—Å–µ $success_count —Ç–æ–ø–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã"
    else
        warn "–°–æ–∑–¥–∞–Ω–æ $success_count –∏–∑ $total_count —Ç–æ–ø–∏–∫–æ–≤"
    fi
}

# –û—Ç–∫—Ä—ã—Ç—å shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
open_shell() {
    local pod_name="$1"
    local namespace="${2:-model-registry}"
    
    if [ -z "$pod_name" ]; then
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—ã:"
        kubectl get pods -A
        read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥–∞: " pod_name
        read -p "–í–≤–µ–¥–∏—Ç–µ namespace [model-registry]: " namespace
        namespace=${namespace:-model-registry}
    fi
    
    log "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ–¥—É $pod_name –≤ namespace $namespace"
    kubectl exec -it -n "$namespace" "$pod_name" -- /bin/bash
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command="${1:-help}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
    check_scripts
    
    case "$command" in
        "deploy")
            log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞..."
            ./scripts/deploy-cluster.sh
            ;;
        "start")
            ./scripts/destroy-cluster.sh start
            ;;
        "stop")
            ./scripts/destroy-cluster.sh stop
            ;;
        "destroy")
            ./scripts/destroy-cluster.sh destroy
            ;;
        "status")
            ./scripts/destroy-cluster.sh status
            ;;
        "services")
            shift
            ./scripts/manage-services.sh "$@"
            ;;
        "port-forward")
            port_forward "$2"
            ;;
        "redpanda-topics")
            shift
            create_redpanda_topics "$@"
            ;;
        "shell")
            open_shell "$2" "$3"
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            show_help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@" 